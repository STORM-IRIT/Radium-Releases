name: Compile Radium and generate artifacts

defaults:
  run:
    shell: bash

on:
  push:
    branches: [ master ]
  repository_dispatch:
    types: [code-update-event]
  pull_request:
    branches: [ master ]

env:
  build-dir: $GITHUB_WORKSPACE/build/
  install-dir: $GITHUB_WORKSPACE/install/
  src-dir: $GITHUB_WORKSPACE/src/
  
jobs:
#     https://github.com/orgs/community/discussions/26284
  matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          matrix=$(echo $(cat .github/workflows/matrix.json) | sed 's/ //g' )
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
  build:
    needs: [matrix]
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix.outputs.matrix) }}
    steps:
      - name: Install Ninja
        shell: bash
        run: ${{ runner.os == 'macOS' && 'brew install ninja' || runner.os == 'Windows' && 'choco install ninja' || 'sudo apt-get install ninja-build' }}
      - name: Add msbuild to PATH
        uses: seanmiddleditch/gha-setup-vsdevenv@master
        if: runner.os == 'Windows'

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          cache: true
          cache-key-prefix: install-qt-action-${{ matrix.config.name }}-6.2.0
          version: 6.2.0
      - name: prerare directories
        run: |
          mkdir -p ${{ env.install-dir }}/external
          mkdir -p ${{ env.install-dir }}/Radium-Engine
          mkdir -p ${{ env.build-dir }}
          mkdir -p ${{ env.src-dir }} 
          
      - name: Clone Radium
        run: |
          git clone --recurse-submodules https://github.com/STORM-IRIT/Radium-Engine.git --single-branch ${{ env.src-dir }}/Radium-Engine
          
      - name: Cache external build
        id: cache-external
        uses: actions/cache@v4
        with:
          path: ${{ env.build-dir }}/external
          key: ${{ matrix.config.name }}-external-v1-${{ hashFiles('src/Radium-Engine/external/**/CMakeLists.txt') }} 
      - name: Configure and build external
        run: |
          cmake -S ${{ env.src-dir }}/Radium-Engine/external -B ${{ env.build-dir }}/external \
          -GNinja -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
          -DCMAKE_C_COMPILER=${{ matrix.config.cc }} -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_EXECUTE_PROCESS_COMMAND_ECHO=STDOUT -DCMAKE_INSTALL_MESSAGE=LAZY \
          -DCMAKE_INSTALL_PREFIX=${{ env.install-dir }}/external
          cmake --build build/external --parallel --config Release
      - name: Cache Radium build
        id: cache-radium
        uses: actions/cache@v4
        with:
          path: build/Radium-Engine
          key: ${{ matrix.config.name }}-radium-v1-${{ hashFiles('src/Radium-Engine/external/**/CMakeLists.txt') }} 
      - name: Configure Radium
        run: |
          cmake -S ${{ env.src-dir }}/Radium-Engine/ -B ${{ env.build-dir }}/Radium-Engine/ \
          -GNinja -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
          -DCMAKE_C_COMPILER=${{ matrix.config.cc }} -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=${{ env.install-dir }}/Radium-Engine -DCMAKE_EXECUTE_PROCESS_COMMAND_ECHO=STDOUT \
          -DRADIUM_UPDATE_VERSION=OFF -DRADIUM_ENABLE_TESTING=OFF -DRADIUM_ENABLE_EXAMPLES=ON \
          -DRADIUM_EXTERNAL_CMAKE_INSTALL_MESSAGE=LAZY \
          -C ${{ env.install-dir }}/external/radium-options.cmake
      - name: Build Radium
        run: |
          cmake --build ${{ env.build-dir }}/Radium-Engine --parallel --config Release --target install
          find ${{ env.install-dir }}
      - name: Clone and configure Radium Apps
        run: |
          git clone https://github.com/STORM-IRIT/Radium-Apps.git --branch master --single-branch ${{ env.src-dir }}/Radium-Apps
          cmake -S ${{ env.src-dir }}/Radium-Apps -B ${{ env.build-dir }}/Radium-Apps -GNinja \
          -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} -DCMAKE_C_COMPILER=${{ matrix.config.cc }} -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=${{ env.install-dir }}/Radium-Apps -DRadium_DIR=${{ env.install-dir }}/Radium-Engine/lib/cmake/Radium
      - name: Build Radium Apps
        run: |
          cmake --build  ${{ env.build-dir }}/Radium-Apps  --parallel --config Release --target install
         
      - name: Run qtdeploy on windows
        if: runner.os == 'Windows'
        run: |
          windeployqt.exe  ${{ env.install-dir }}/Radium-Apps/bin/Radium-Sandbox.exe
   
      - name: Compute Radium Release
        id: releasename
        run: echo "::set-output name=RELEASE_NAME::Radium-$(date +'%Y-%m-%d')"
          
      - name: Prepare installation directory for zipping
        run: |
          mv  ${{ env.install-dir }} ${{steps.releasename.outputs.RELEASE_NAME}}-${{ matrix.config.suffix }}
          7z a -tzip "${{steps.releasename.outputs.RELEASE_NAME}}-${{ matrix.config.suffix }}.zip" "./${{steps.releasename.outputs.RELEASE_NAME}}-${{ matrix.config.suffix }}/"
          echo "Release Changelog" >./message.txt
          git log -1 -C ${{ env.src-dir }}/Radium-Engine/ | tail -n +6 >> ./message.txt
   
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: ${{steps.releasename.outputs.RELEASE_NAME}}-${{ matrix.config.suffix }}.zip
      - name: Upload message
        uses: actions/upload-artifact@v4
        with:
          name: message
          path: ./message.txt

  create_release:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event.ref_name == github.event.repository.default_branch
    steps:     
     - name: Compute Radium Release
       id: releasename
       run: |
         echo "::set-output name=RELEASE_NAME::Radium-$(date +'%Y-%m-%d')"
         echo "::set-output name=TAG_NAME::$(date +'%Y.%m.%d')"
     - name: Load message from build
       uses: actions/download-artifact@v4
       with:
          name: message
     - name: Delete Release if already present
       uses: dev-drprasad/delete-tag-and-release@v0.1.2
       with:
         delete_release: true # default: false
         tag_name: ${{steps.releasename.outputs.TAG_NAME}} # tag name to delete
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     - name: Create Release
       id: create_release
       #uses: softprops/action-gh-release@v1
       uses: actions/create-release@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
         tag_name: ${{steps.releasename.outputs.TAG_NAME}}
         #name: ${{steps.releasename.outputs.RELEASE_NAME}}
         release_name: ${{steps.releasename.outputs.RELEASE_NAME}}
         draft: false
         prerelease: true
         body_path: message/message.txt
     - name: Print debug infor for PR
       run: |
         echo "Debug informations for PR"
         echo "tag_name: ${{steps.releasename.outputs.TAG_NAME}}"
         echo "name: ${{steps.releasename.outputs.RELEASE_NAME}}"
         echo "draft: false"
         echo "prerelease: true"
         echo "body_path: message/message.txt"
         cat message/message.txt

     - shell: bash
       name: Cache upload url
       run: |
         echo "${{ steps.create_release.outputs.upload_url }}" > release-url.txt

     - name: Save upload url for next stop
       uses: actions/upload-artifact@v4
       with:
         name: releaseurl
         path: release-url.txt


  upload_release:
    needs: [create_release, matrix]
    runs-on: ${{ matrix.config.os }}
    if: github.event.ref_name == github.event.repository.default_branch
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix.outputs.matrix) }}
    steps:
    
     - name: Load artifacts from build
       uses: actions/download-artifact@v4
       with:
          name: releaseurl

     - name: Compute Radium Release
       id: releaseinfo
       run: |
        echo "::set-output name=RELEASE_URL::`cat releaseurl/release-url.txt`"
        echo "::set-output name=RELEASE_NAME::Radium-$(date +'%Y-%m-%d')"

     - name: Load artifacts from build
       uses: actions/download-artifact@v4
       with:
          name: binaries

     - name: Upload Release Asset
       id: upload-release-asset
       uses: actions/upload-release-asset@v4
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
         upload_url: ${{steps.releaseinfo.outputs.RELEASE_URL}}
         asset_path: ./binaries/${{steps.releaseinfo.outputs.RELEASE_NAME}}-${{ matrix.config.suffix }}.zip
         asset_name: ${{steps.releaseinfo.outputs.RELEASE_NAME}}-${{ matrix.config.suffix }}.zip
         asset_content_type: application/zip

  dispatch:
    needs: upload_release
    if: github.event.ref_name == github.event.repository.default_branch
    strategy:
      matrix:
        repo: ['STORM-IRIT/Radium-Engine', 'STORM-IRIT/Radium-Apps', 'STORM-IRIT/Radium-PluginExample']
    runs-on: ubuntu-latest
    steps:
      - name: Compute Radium Release
        id: releasename
        run: echo "::set-output name=TAG_NAME::$(date +'%Y-%m-%d')"

      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}
          repository: ${{ matrix.repo }}
          event-type: new-tag-event
          client-payload: '{"tagname": "${{steps.releasename.outputs.TAG_NAME}}"}'
