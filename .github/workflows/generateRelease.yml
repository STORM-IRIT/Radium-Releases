name: Compile Radium ecosystem and generate artifacts

on:
  push:
    branches: [ master ]
  repository_dispatch:
    types: [code-update-event]

jobs:     
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
     - name: Compute Radium Release
       id: releasename
       run: echo "::set-output name=RELEASE_NAME::Radium-$(date +'%Y-%m-%d')"
       
     - uses: seanmiddleditch/gha-setup-ninja@master
         
     - name: Add msbuild to PATH
       uses: microsoft/setup-msbuild@v1.0.0
       if: runner.os == 'Windows'
       with:
         vs-version: 16.6

     - name: Cache Qt
       id: cache-qt
       uses: actions/cache@v1
       with:
         path: ../Qt
         key: ${{ runner.os }}-QtCache

     - name: Install Qt
       uses: jurplel/install-qt-action@v2
       with:
         cached: ${{ steps.cache-qt.outputs.cache-hit }}

         
     - name: Clone, configure and build Radium (Windows)
       if: runner.os == 'Windows'
       run: |
         
         echo "Release name: ${{steps.releasename.outputs.RELEASE_NAME}}-${{ runner.os }}"

         mkdir -p install/
         
         mkdir -p src && cd src && git clone https://github.com/STORM-IRIT/Radium-Engine.git --branch master --single-branch && cd ..
         
         mkdir -p build/Radium-Engine && cd build/Radium-Engine
         cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../../install -GNinja -DRADIUM_IO_ASSIMP=FALSE -DRADIUM_EXTERNAL_CMAKE_INSTALL_MESSAGE=LAZY -DCMAKE_EXECUTE_PROCESS_COMMAND_ECHO=STDOUT -DRADIUM_UPDATE_VERSION=OFF  ../../src/Radium-Engine 
         ninja 
         ninja install
         
     - name: Clone, configure and build Radium (MacOS Ubuntu)
       if: runner.os != 'Windows'
       run: |
         echo "Release name: ${{steps.releasename.outputs.RELEASE_NAME}}-${{ runner.os }}"

         mkdir -p install/
         
         mkdir -p src && cd src && git clone https://github.com/STORM-IRIT/Radium-Engine.git --branch master --single-branch && cd ..
         
         mkdir -p build/Radium-Engine
         cd build/Radium-Engine 
         cmake ../../src/Radium-Engine -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../../install/ -GNinja -DRADIUM_IO_ASSIMP=TRUE -DCMAKE_EXECUTE_PROCESS_COMMAND_ECHO=STDOUT -DRADIUM_UPDATE_VERSION=OFF
         cmake --build . --parallel --config Release --target install
         
     - name: Clone and configure Radium Apps
       run: |
         cd src 
         git clone https://github.com/STORM-IRIT/Radium-Apps.git --branch master --single-branch
         cd ..
         mkdir -p build/Radium-Apps
         cd build/Radium-Apps 
         cmake ../../src/Radium-Apps -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../../install/ -GNinja -DRadium_DIR=../../install/lib/cmake/Radium
         cmake --build . --parallel --config Release --target install
       
     - name: Generate zip files
       run: |
         mv install ${{steps.releasename.outputs.RELEASE_NAME}}-${{ runner.os }}
         zip -r ${{steps.releasename.outputs.RELEASE_NAME}}-${{ runner.os }}.zip ${{steps.releasename.outputs.RELEASE_NAME}}-${{ runner.os }}

     - name: Upload artifact
       uses: actions/upload-artifact@v1
       with:
         name: ${{steps.releasename.outputs.RELEASE_NAME}}-${{ runner.os }}
         path: ${{steps.releasename.outputs.RELEASE_NAME}}-${{ runner.os }}.zip
       
  create_release:
    needs: [build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      
     - name: Compute Radium Release
       id: releasename
       run: echo "::set-output name=RELEASE_NAME::Radium-$(date +'%Y-%m-%d')"
       
     - name: Create Release
       id: create_release
       uses: actions/create-release@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
         tag_name: ${{ github.ref }}
         release_name: ${{steps.releasename.outputs.RELEASE_NAME}}
         draft: true
         prerelease: true

     - name: set environment variables
       run: echo "::set-env name=RELEASE_NAME::${{ steps.create_release.outputs.upload_url }}"


  upload_release:
    needs: [create_release]
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    
    steps:            
     - name: set environment variables
       uses: allenevans/set-env@v1.0.0
       with:
         release_name: ${{ env.RELEASE_NAME }}
         
     - name: Load artifacts from build
       uses: actions/download-artifact@v1
       with:
          name: ${{ env.RELEASE_NAME }}
         
     - name: Upload Release Asset
       id: upload-release-asset
       uses: actions/upload-release-asset@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
         upload_url: ${{ env.RELEASE_NAME }}
         asset_path: ./${{ env.RELEASE_NAME }}-${{ runner.os }}.zip
         asset_name: ${{ env.RELEASE_NAME }}-${{ runner.os }}.zip
         asset_content_type: application/zip

