name: Compile Radium ecosystem and generate artifacts

on:
  push:
    branches: [ master ]
  repository_dispatch:
    types: [code-update-event]

jobs:     
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
     - uses: seanmiddleditch/gha-setup-ninja@master

     - name: Compute Release name
       run: echo ::set-env name=release_name::Radium-$(date +%Y.%m.%d)
         
     - name: Add msbuild to PATH
       uses: microsoft/setup-msbuild@v1.0.0
       if: runner.os == 'Windows'
       with:
         vs-version: 16.6

     - name: Cache Qt
       id: cache-qt
       uses: actions/cache@v1
       with:
         path: ../Qt
         key: ${{ runner.os }}-QtCache

     - name: Install Qt
       uses: jurplel/install-qt-action@v2
       with:
         cached: ${{ steps.cache-qt.outputs.cache-hit }}
         
     - name: Create installation folder
       run: |
         echo "Installation path: ${{ env.release_name }}-${{ runner.os }}"
         mkdir -p ${{ env.release_name }}-${{ runner.os }}/
     
     - name: Cloning Radium-Engine
       run: |
         mkdir src && cd src 
         git clone https://github.com/STORM-IRIT/Radium-Engine.git --branch master --single-branch
         cd ..
         
     - name: Create build folder for Radium-Engine
       run: |
         mkdir -p build/Radium-Engine

     - name: Configure Radium for Windows
       if: runner.os == 'Windows'
       run: |
         cd build/Radium-Engine 
         cmake ../../src/Radium-Engine -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../../${{ env.release_name }}-${{ runner.os }}/ -GNinja -DRADIUM_IO_ASSIMP=FALSE -DCMAKE_OBJECT_PATH_MAX=500
         
     - name: Configure Radium for MacOS/Linux
       if: runner.os != 'Windows'
       run: |
         cd build/Radium-Engine 
         cmake ../../src/Radium-Engine -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=..\..\${{ env.release_name }}-${{ runner.os }} -GNinja -DRADIUM_IO_ASSIMP=TRUE

     - name: Compile Radium
       run: cd build/Radium-Engine && cmake --build . --parallel --config Release --target install
         
     - name: Clone and configure Radium Apps
       run: |
         cd src 
         git clone https://github.com/STORM-IRIT/Radium-Apps.git --branch master --single-branch
         cd ..
         mkdir -p build/Radium-Apps
         cd build/Radium-Apps 
         cmake ../../src/Radium-Apps -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../../${{ env.release_name }}-${{ runner.os }}/ -GNinja -DRadium_DIR=../../${{ env.release_name }}-${{ runner.os }}

     - name: Compile Radium Apps
       run: cd build/Radium-Apps && cmake --build . --parallel --config Release --target install
       
     - name: Generate zip files
       run: |
         zip -r ${{ env.release_name }}-${{ runner.os }}.zip ${{ env.release_name }}-${{ runner.os }}

     - name: Upload artifact
       uses: actions/upload-artifact@v1
       with:
         name: ${{ env.release_name }}
         path: ${{ env.release_name }}-${{ runner.os }}.zip
       
  create_release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      
     - name: Compute Release name
       run: echo ::set-env name=release_name::Radium-$(date +%Y.%m.%d)
       
     - name: Create Release
       id: create_release
       uses: actions/create-release@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
         tag_name: ${{ github.ref }}
         release_name: ${{ env.release_name }}
         draft: true
         prerelease: true
    
    
  upload_release:
    needs: [create_release]
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    
    steps:            
     - name: Load artifacts from build
       uses: actions/download-artifact@v1
       with:
          name: ${{ env.release_name }}
         
     - name: Upload Release Asset
       id: upload-release-asset
       uses: actions/upload-release-asset@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
         upload_url: ${{ env.release_url }}
         asset_path: ./${{ env.release_name }}-${{ runner.os }}.zip
         asset_name: ${{ env.release_name }}-${{ runner.os }}.zip
         asset_content_type: application/zip

