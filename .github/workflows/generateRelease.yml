name: Compile Radium and generate artifacts

defaults:
  run:
    shell: bash

on:
  push:
    branches: [ main ]
  repository_dispatch:
    types: [code-update-event]
  pull_request:
    branches: [ main ]

env:
  install_prefix: install
  build_prefix: build
  src_prefix: src
  GH_TOKEN: ${{ github.token }}


#     https://github.com/orgs/community/discussions/26284
jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          matrix=$(echo $(cat .github/workflows/matrix.json) | sed 's/ //g' )
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  message:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_NAME : ${{ steps.release-name.outputs.RELEASE_NAME }}
      TAG_NAME : ${{ steps.release-name.outputs.TAG_NAME }}
    steps:
      - name: Clone Radium and create message
        id: sha
        run: |
          git clone --recurse-submodules https://github.com/STORM-IRIT/Radium-Engine.git --single-branch ${{ env.src_prefix }}/Radium-Engine
          cd "${{ env.src_prefix }}/Radium-Engine"
          from=`gh release list --exclude-drafts --exclude-pre-releases -L1 --json publishedAt | jq -r '.[] | .publishedAt '`
          cd "${{ github.workspace }}"
          echo "Release Changelog" >./message.txt
          git -C ${{ env.src_prefix }}/Radium-Engine/ log --since="$from" --pretty=format:"- %h %ad %s" --date=short | grep Merge >> ./message.txt
      - name: Upload message
        uses: actions/upload-artifact@v4
        with:
          name: message
          path: ./message.txt
      - name: Compute Radium Release and TAG
        id: release-name
        run: |
          echo "RELEASE_NAME=Radium-$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "TAG_NAME=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT

  build:
    needs: [message,matrix]
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix.outputs.matrix) }}
    steps:
      - name: Compute paths
        id: paths
        run: |
          radium_build_dir="${{ env.build_prefix }}/${{ matrix.build-type }}/Radium-Engine"
          radium_install_dir="${{ env.install_prefix }}/${{ matrix.build-type }}/Radium-Engine"
          external_build_dir="${{ env.build_prefix }}/${{ matrix.build-type }}/external"
          external_install_dir="${{ env.install_prefix }}/${{ matrix.build-type }}/external"
          echo "radium_build_dir=$radium_build_dir" >> $GITHUB_OUTPUT
          echo "radium_install_dir=$radium_install_dir" >> $GITHUB_OUTPUT
          echo "external_build_dir=$external_build_dir" >> $GITHUB_OUTPUT
          echo "external_install_dir=$external_install_dir" >> $GITHUB_OUTPUT

      - name: Add msbuild to PATH
        uses: seanmiddleditch/gha-setup-vsdevenv@master
        if: runner.os == 'Windows'
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          cache: true
          cache-key-prefix: install-qt-action-${{ matrix.config.name }}-6.2.0
          version: 6.2.0

      - name: Install dep Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libglfw3-dev libxml2-utils

      - name: Prepare directories
        run: |
          mkdir -p "${{ env.src_prefix }}"
          mkdir -p "${{ steps.paths.outputs.radium_build_dir }}"
          mkdir -p "${{ steps.paths.outputs.external_build_dir }}"
          mkdir -p "${{ steps.paths.outputs.radium_install_dir }}"
          mkdir -p "${{ steps.paths.outputs.external_install_dir }}"

      - name: Clone Radium
        id: sha
        run: |
          git clone --recurse-submodules https://github.com/STORM-IRIT/Radium-Engine.git --single-branch ${{ env.src_prefix }}/Radium-Engine
          radium_sha=`git -C ${{ env.src_prefix }}/Radium-Engine rev-parse --short HEAD`
          echo "radium_sha=$radium_sha" >> $GITHUB_OUTPUT
      - name: Cache radium install
        id: cache-radium-install
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.paths.outputs.external_install_dir }}
            ${{ steps.paths.outputs.radium_install_dir }}
          key: ${{ matrix.config.name }}-radium-v1-${{ steps.sha.outputs.radium_sha }}
      - name: Cache radium build
        id: cache-radium-build
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.paths.outputs.external_build_dir }}
            ${{ steps.paths.outputs.radium_build_dir }}
          key: ${{ matrix.config.name }}-radium-build-v1

      - name: Configure and build radium
        if: steps.cache-radium-install.outputs.cache-hit != 'true'
        run: |
           "${{ env.src_prefix }}/Radium-Engine/scripts/build.sh" \
           -B ${{ env.build_prefix }} \
           -G Ninja --cxx ${{ matrix.config.cxx }} --cc ${{ matrix.config.cc }} \
           -c ${{ matrix.build-type }} --enable-testing OFF \
           --install-external "${{ steps.paths.outputs.external_install_dir }}" \
           --install-radium "${{ steps.paths.outputs.radium_install_dir }}"

      - name: Radium Apps
        run: |
          git clone https://github.com/STORM-IRIT/Radium-Apps.git --branch master --single-branch ${{ env.src_prefix }}/Radium-Apps

          cmake -S "${{ env.src_prefix }}/Radium-Apps" -B "${{ env.build_prefix }}/Radium-Apps" -GNinja \
          -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          -DCMAKE_INSTALL_PREFIX=${{ env.install_prefix }}/Radium-Apps \
          -DRadium_DIR="${{ github.workspace }}/${{ steps.paths.outputs.radium_install_dir }}/lib/cmake/Radium"

          cmake --build  ${{ env.build_prefix }}/Radium-Apps  --parallel --config ${{ matrix.build-type }} --target install

      - name: Run qtdeploy on windows
        if: runner.os == 'Windows'
        run: |
          windeployqt.exe  ${{ env.install_prefix }}/Radium-Apps/bin/Radium-Sandbox.exe

      - name: Prepare installation directory for zipping
        run: |
          mv  ${{ env.install_prefix }} ${{needs.message.outputs.RELEASE_NAME}}-${{ matrix.config.suffix }}
          7z a -tzip "${{needs.message.outputs.RELEASE_NAME}}-${{ matrix.config.suffix }}.zip" "./${{needs.message.outputs.RELEASE_NAME}}-${{ matrix.config.suffix }}/"
          # move back for cache
          mv  ${{needs.message.outputs.RELEASE_NAME}}-${{ matrix.config.suffix }} ${{ env.install_prefix }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.config.suffix }}
          path: ${{needs.message.outputs.RELEASE_NAME}}-${{ matrix.config.suffix }}.zip

  create_release:
    needs: [build, message]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Delete Release if already present
        uses: dev-drprasad/delete-tag-and-release@v1.1
        with:
          delete_release: true # default: false
          tag_name: ${{ needs.message.outputs.TAG_NAME }} # tag name to delete
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        run: |
            gh release create ${{ needs.message.outputs.TAG_NAME }} -t ${{ needs.message.outputs.RELEASE_NAME}} -F ./message.txt -p *.zip"

      - name: Print debug info for PR
        run: |
           echo "Debug informations for PR"
           echo "tag_name: ${{needs.message.outputs.TAG_NAME}}"
           echo "name: ${{needs.message.outputs.RELEASE_NAME}}"
           echo "draft: false"
           echo "prerelease: true"
           echo "body_path: message/message.txt"
           cat message/message.txt

  dispatch:
    needs: [message,create_release]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        repo: ['STORM-IRIT/Radium-Engine', 'STORM-IRIT/Radium-Apps', 'STORM-IRIT/Radium-PluginExample']
    runs-on: ubuntu-latest
    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}
          repository: ${{ matrix.repo }}
          event-type: new-tag-event
          client-payload: '{"tagname": "${{ needs.message.outputs.TAG_NAME }}"}'
