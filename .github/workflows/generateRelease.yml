name: Compile Radium ecosystem and generate artifacts

defaults:
  run:
    shell: bash

on:
  push:
    branches: [ master ]
  repository_dispatch:
    types: [code-update-event]

jobs:     
  build:
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { name: "Windows MSVC", suffix: "Windows", os: windows-latest, cc: "cl.exe", cxx: "cl.exe", assimp: "OFF" }
          - { name: "Ubuntu gcc", suffix: "Linux-gcc7", os: ubuntu-18.04, cc: "gcc", cxx: "g++", assimp: "ON" }
          - { name: "Ubuntu gcc", suffix: "Linux-gcc10", os: ubuntu-20.04, cc: "gcc-10", cxx: "g++-10", assimp: "ON" }
          - { name: "MacOS clang", suffix: "macOS", os: macos-latest, cc: "clang", cxx: "clang++", assimp: "ON" }

    steps:       
     - uses: seanmiddleditch/gha-setup-ninja@master
         
     - name: Add msbuild to PATH
       uses: seanmiddleditch/gha-setup-vsdevenv@master
       if: runner.os == 'Windows'

     - name: Install Qt
       uses: jurplel/install-qt-action@v2
       with:
         cached: false
         
     - name: Clone Radium
       run: |
         mkdir -p install/
         mkdir -p src && cd src && git clone https://github.com/STORM-IRIT/Radium-Engine.git --single-branch && cd ..
         mkdir -p build/Radium-Engine
         
     - name: Configure Radium
       run: |
         cd build/Radium-Engine 
         cmake ../../src/Radium-Engine -GNinja -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} -DCMAKE_C_COMPILER=${{ matrix.config.cc }} -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../../install/ -DRADIUM_IO_ASSIMP=${{ matrix.config.assimp }} -DCMAKE_EXECUTE_PROCESS_COMMAND_ECHO=STDOUT -DRADIUM_UPDATE_VERSION=OFF -DRADIUM_EXTERNAL_CMAKE_INSTALL_MESSAGE=LAZY
         
     - name: Build Radium
       run: |
         cd build/Radium-Engine 
         cmake --build . --parallel --config Release --target install
         
     - name: Clone and configure Radium Apps
       run: |
         cd src 
         git clone https://github.com/STORM-IRIT/Radium-Apps.git --branch master --single-branch
         cd ..
         mkdir -p build/Radium-Apps
         cd build/Radium-Apps 
         cmake ../../src/Radium-Apps -GNinja -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} -DCMAKE_C_COMPILER=${{ matrix.config.cc }} -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../../install/ -DRadium_DIR=../../install/lib/cmake/Radium

     - name: Build Radium Apps
       run: |
         cd build/Radium-Apps 
         cmake --build . --parallel --config Release --target install
         
     - name: Run qtdeploy on windows
       if: runner.os == 'Windows'
       run: |
         windeployqt.exe install/bin/Radium-Sandbox.exe

     - name: Compute Radium Release
       id: releasename
       run: echo "::set-output name=RELEASE_NAME::Radium-$(date +'%Y-%m-%d')"
         
     - name: Prepare installation directory for zipping
       run: |
         mv install ${{steps.releasename.outputs.RELEASE_NAME}}-${{ matrix.config.suffix }}
         7z a -tzip "${{steps.releasename.outputs.RELEASE_NAME}}-${{ runner.os }}.zip" "./${{steps.releasename.outputs.RELEASE_NAME}}-${{ matrix.config.suffix }}/"
     
     - name: Upload artifact
       uses: actions/upload-artifact@v1
       with:
         name: binaries
         path: ${{steps.releasename.outputs.RELEASE_NAME}}-${{ matrix.config.suffix }}.zip
       
  create_release:
    needs: [build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      
     - name: Compute Radium Release
       id: releasename
       run: |
         echo "::set-output name=RELEASE_NAME::Radium-$(date +'%Y-%m-%d')"
         echo "::set-output name=TAG_NAME::$(date +'%Y.%m.%d')"
       
     - name: Create Release
       id: create_release
       uses: actions/create-release@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
         tag_name: ${{steps.releasename.outputs.TAG_NAME}}
         release_name: ${{steps.releasename.outputs.RELEASE_NAME}}
         draft: false
         prerelease: true

     - shell: bash
       name: Cache upload url
       run: |
         echo "${{ steps.create_release.outputs.upload_url }}" > release-url.txt

     - name: Save upload url for next stop
       uses: actions/upload-artifact@v1
       with:
         name: releaseurl
         path: release-url.txt


  upload_release:
    needs: [create_release]
    runs-on: ${{ matrix.os }}
    if: always()
    
    strategy:
      fail-fast: false
      matrix:
        config:
          - { name: "Windows MSVC", suffix: "Windows", os: windows-latest, cc: "cl.exe", cxx: "cl.exe", assimp: "OFF" }
          - { name: "Ubuntu gcc", suffix: "Linux-gcc7", os: ubuntu-18.04, cc: "gcc", cxx: "g++", assimp: "ON" }
          - { name: "Ubuntu gcc", suffix: "Linux-gcc10", os: ubuntu-20.04, cc: "gcc-10", cxx: "g++-10", assimp: "ON" }
          - { name: "MacOS clang", suffix: "macOS", os: macos-latest, cc: "clang", cxx: "clang++", assimp: "ON" }
    
    steps:   
         
     - name: Load artifacts from build
       uses: actions/download-artifact@v1
       with:
          name: releaseurl
      
     - name: Compute Radium Release
       id: releaseinfo
       run: |
        echo "::set-output name=RELEASE_URL::`cat releaseurl/release-url.txt`"
        echo "::set-output name=RELEASE_NAME::Radium-$(date +'%Y-%m-%d')"
         
     - name: Load artifacts from build
       uses: actions/download-artifact@v1
       with:
          name: binaries
         
     - name: Upload Release Asset
       id: upload-release-asset
       uses: actions/upload-release-asset@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
         upload_url: ${{steps.releaseinfo.outputs.RELEASE_URL}}
         asset_path: ./binaries/${{steps.releaseinfo.outputs.RELEASE_NAME}}-${{ matrix.config.suffix }}.zip
         asset_name: ${{steps.releaseinfo.outputs.RELEASE_NAME}}-${{ runner.os }}.zip
         asset_content_type: application/zip

